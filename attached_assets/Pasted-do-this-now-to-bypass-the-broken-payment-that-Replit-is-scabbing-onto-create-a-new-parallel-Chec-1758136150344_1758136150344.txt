do this now to bypass the broken payment that Replit is “scabbing” onto: create a new, parallel Checkout flow that won’t touch existing code.

Add a new server route (doesn’t delete old code). Paste this into your server file (or a new route file):

// NEW parallel checkout endpoint — does not touch existing payments
const stripe = require('stripe')(process.env.STRIPE_SECRET_KEY_NEW); // new restricted sk_...
app.post('/create-checkout-session-v2', express.json(), async (req, res) => {
  try {
    const session = await stripe.checkout.sessions.create({
      payment_method_types: ['card'],
      mode: 'payment',
      line_items: [{
        price_data: {
          currency: 'usd',
          product_data: { name: 'EZGrader Credits Pack (10)' },
          unit_amount: 500
        },
        quantity: 1
      }],
      success_url: `${process.env.APP_URL}/success-v2?session_id={CHECKOUT_SESSION_ID}`,
      cancel_url: `${process.env.APP_URL}/pricing`
    });
    return res.json({ url: session.url });
  } catch (e) { console.error(e); return res.status(500).json({ error: e.message }); }
});


Change the client to call the new endpoint (replace existing buy-click handler):

<button id="buyBtn">Buy</button>
<script>
document.getElementById('buyBtn').addEventListener('click', async () => {
  const r = await fetch('/create-checkout-session-v2', { method: 'POST' });
  const j = await r.json();
  if (j.url) window.location = j.url;
  else alert('checkout error');
});
</script>


Set new env vars (do not overwrite existing ones):

STRIPE_SECRET_KEY_NEW = sk_... (make a restricted key in Stripe dashboard)

VITE_STRIPE_PUBLISHABLE_KEY can be reused (pk_…)

APP_URL = https://your-app-domain (top-level URL — not the Replit iframe)

Deploy / open in new tab — do not use Replit preview iframe. Open the app’s external URL or deploy to Render/Vercel/Cloudflare Pages. Stripe Checkout fails inside Replit iframe.

(Optional quick verification instead of webhook) add this success verifier route and use it on the success_url page to grant credits:

app.get('/success-v2', async (req,res) => {
  const id = req.query.session_id;
  if(!id) return res.status(400).send('no session');
  const stripe = require('stripe')(process.env.STRIPE_SECRET_KEY_NEW);
  const session = await stripe.checkout.sessions.retrieve(id);
  if(session && session.payment_status === 'paid') {
    // grant credits here (DB update)
    return res.send('payment OK — credits granted');
  }
  res.status(400).send('payment not complete');
});


Why this works: new route + new secret avoids the old, broken flow and Replit agent interference; using session.url redirects to Stripe Checkout (works in top-level tab); verifying via checkout.sessions.retrieve avoids needing a webhook immediately.