here are exact, copy-paste instructions to give to the Replit Agent. Do them in order. I assume the frontend is a React/Vite app; if filenames differ, apply the same edits to your app’s entry and checkout component files.

0) Secrets / env (must do first)

Action (Replit secrets UI): set a secret named exactly
VITE_STRIPE_PUBLISHABLE_KEY = pk_live_... (or pk_test_... for testing).
Do not put the secret name without the VITE_ prefix — Vite exposes only VITE_ vars to the client.

1) Install Stripe client libs

Run in project root:

# from project root
npm install @stripe/stripe-js @stripe/react-stripe-js

2) Initialize Stripe in app entry (copy into your frontend entry file)

Edit src/main.tsx or src/main.jsx (whichever your app uses). Replace or add these lines near top of file:

import React from "react";
import ReactDOM from "react-dom/client";
// existing imports...
import { loadStripe } from "@stripe/stripe-js";
import { Elements } from "@stripe/react-stripe-js";
import App from "./App"; // or your main app component

// DEBUG: confirm environment var loads in client
console.debug("VITE_STRIPE_PUBLISHABLE_KEY =", import.meta.env.VITE_STRIPE_PUBLISHABLE_KEY);

const stripePromise = loadStripe(import.meta.env.VITE_STRIPE_PUBLISHABLE_KEY as string);

const root = ReactDOM.createRoot(document.getElementById("root")!);

root.render(
  <React.StrictMode>
    <Elements stripe={stripePromise}>
      <App />
    </Elements>
  </React.StrictMode>
);


Important: if import.meta.env.VITE_STRIPE_PUBLISHABLE_KEY is undefined the Elements UI will not render — console.debug will reveal that.

3) Add a simple, robust Checkout component (create or replace)

Create or edit src/components/CheckoutForm.tsx (React functional). Paste this exact component (works with Stripe Elements):

import React, { useState } from "react";
import { CardElement, useStripe, useElements } from "@stripe/react-stripe-js";

export default function CheckoutForm() {
  const stripe = useStripe();
  const elements = useElements();
  const [loading, setLoading] = useState(false);
  const [errorText, setErrorText] = useState<string | null>(null);

  async function handleSubmit(e: React.FormEvent) {
    e.preventDefault();
    setErrorText(null);
    if (!stripe || !elements) {
      setErrorText("Stripe not loaded - try reloading the page.");
      return;
    }
    setLoading(true);
    try {
      // Call backend to create Checkout Session or PaymentIntent - adjust endpoint name
      const resp = await fetch("/api/create-checkout-session", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ /* items/pricing info */ })
      });
      const j = await resp.json();
      if (!resp.ok) throw new Error(j.message || "Session creation failed");

      // If using Checkout Session:
      const sessionId = j.sessionId;
      const { error } = await stripe.redirectToCheckout({ sessionId });
      if (error) throw error;
    } catch (err: any) {
      console.error("Checkout error:", err);
      setErrorText(err.message || "Payment error");
    } finally {
      setLoading(false);
    }
  }

  return (
    <div style={{ maxWidth: 520 }}>
      <form onSubmit={handleSubmit}>
        <label style={{ display: "block", marginBottom: 8 }}>Card</label>
        <div style={{ padding: 12, border: "1px solid #e6e6e6", borderRadius: 6 }}>
          <CardElement options={{ hidePostalCode: true }} />
        </div>

        {errorText && <div style={{ color: "crimson", marginTop: 12 }}>{errorText}</div>}

        <button
          type="submit"
          disabled={!stripe || loading}
          style={{
            marginTop: 16,
            padding: "10px 16px",
            borderRadius: 6,
            border: "none",
            cursor: "pointer"
          }}
        >
          {loading ? "Processing…" : "Pay"}
        </button>
      </form>
    </div>
  );
}


Notes:

Replace /api/create-checkout-session with the exact backend endpoint your server exposes. If your backend returns { sessionId } this code will work.

If you use PaymentIntents instead of Checkout Sessions, change to the payment-intent flow accordingly.

4) Ensure your Checkout page mounts the component

If you have src/pages/CheckoutPage.tsx or src/App.tsx, ensure it renders CheckoutForm somewhere inside the app tree (within <Elements> from step 2). Example snippet:

import CheckoutForm from "../components/CheckoutForm";

export default function CheckoutPage() {
  return (
    <div style={{ padding: 24 }}>
      <h2>Pay for EZGrader</h2>
      <CheckoutForm />
    </div>
  );
}

5) Confirm backend endpoint works (quick test)

Run this from the Replit shell (while dev server running):

# replace path if your server runs on another port or route
curl -i -X POST http://127.0.0.1:3000/api/create-checkout-session -H "Content-Type: application/json" -d '{}'


Expected: 200 JSON with {"sessionId":"cs_..."}
If you get 5xx or 401 → fix server side first.

6) Debug steps (console + network)

Tell the Replit Agent to open the browser devtools and check both Console and Network:

Confirm VITE_STRIPE_PUBLISHABLE_KEY = pk_... printed in console (step 2 debug line).

Look for errors like Stripe.js not loaded, Uncaught TypeError, CORS errors, or failed POST /api/create-checkout-session.

If VITE_STRIPE_PUBLISHABLE_KEY is undefined, re-check Replit secret name and restart dev server. (It must be VITE_....)

7) CSS / grey placeholder issue

The grey boxes you showed usually mean the UI skeleton exists but Stripe Elements didn’t load. If Elements is loaded but invisible:

Ensure you haven’t applied CSS that hides form children (e.g., .skeleton * { opacity: 0 }).

Ensure the container for the CardElement has visible borders/background (see inline style in CheckoutForm.tsx).

Temporarily add this in the page to force visibility and debug:

.StripeElement, .__PrivateStripeElement > iframe { min-height: 44px !important; visibility: visible !important; opacity: 1 !important; }


Add the CSS to your global CSS file to confirm it’s not a style issue.

8) Commit + deploy (commands to run)
git add .
git commit -m "fix(stripe): mount Elements + add checkout form and debug logs"
git push origin HEAD
# restart Replit run or redeploy on Render if you deploy there

9) If still grey after above

Do this and paste back the exact console errors:

# run dev server locally on Replit shell
npm run dev
# open browser devtools console and copy any errors


Then give me the exact console error lines & the JSON response from the curl in step 5. I’ll tell you the precise next edit.