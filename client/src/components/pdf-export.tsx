import React from 'react';
import { Button } from '@/components/ui/button';
import { FileDown, Printer } from 'lucide-react';

interface PDFExportProps {
  content: string;
  title: string;
  fileName?: string;
  className?: string;
}

export const PDFExport: React.FC<PDFExportProps> = ({ 
  content, 
  title, 
  fileName = 'document',
  className = '' 
}) => {
  
  const generatePrintableHTML = () => {
    // Clean up the content for printing
    let printContent = content;
    
    // Remove any HTML artifacts that might break printing
    printContent = printContent.replace(/<script[^>]*>.*?<\/script>/gi, '');
    printContent = printContent.replace(/<style[^>]*>.*?<\/style>/gi, '');
    
    // Convert basic markdown formatting to HTML
    printContent = printContent.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
    printContent = printContent.replace(/\*(.*?)\*/g, '<em>$1</em>');
    printContent = printContent.replace(/\n/g, '<br>');
    
    const printHTML = `
      <!DOCTYPE html>
      <html>
        <head>
          <meta charset="utf-8">
          <title>${title}</title>
          <style>
            @page {
              margin: 1in;
              size: letter;
            }
            
            body {
              font-family: 'Times New Roman', serif;
              font-size: 12pt;
              line-height: 1.6;
              color: #000;
              background: white;
              max-width: none;
              margin: 0;
              padding: 0;
            }
            
            h1, h2, h3, h4, h5, h6 {
              color: #000;
              margin-top: 24pt;
              margin-bottom: 12pt;
              page-break-after: avoid;
            }
            
            h1 {
              font-size: 18pt;
              font-weight: bold;
              text-align: center;
              border-bottom: 2px solid #000;
              padding-bottom: 12pt;
            }
            
            h2 {
              font-size: 16pt;
              font-weight: bold;
            }
            
            h3 {
              font-size: 14pt;
              font-weight: bold;
            }
            
            p {
              margin: 12pt 0;
              text-align: justify;
            }
            
            strong {
              font-weight: bold;
            }
            
            em {
              font-style: italic;
            }
            
            .header {
              text-align: center;
              margin-bottom: 24pt;
              padding-bottom: 12pt;
              border-bottom: 1px solid #ccc;
            }
            
            .footer {
              margin-top: 24pt;
              padding-top: 12pt;
              border-top: 1px solid #ccc;
              text-align: center;
              font-size: 10pt;
              color: #666;
            }
            
            .content {
              margin: 24pt 0;
            }
            
            /* Print-specific styles */
            @media print {
              body {
                -webkit-print-color-adjust: exact;
                print-color-adjust: exact;
              }
              
              .no-print {
                display: none;
              }
              
              .page-break {
                page-break-before: always;
              }
              
              h1, h2, h3 {
                page-break-after: avoid;
              }
              
              p, div {
                page-break-inside: avoid;
                orphans: 3;
                widows: 3;
              }
            }
            
            /* Math notation styles */
            .katex {
              font-size: 1.1em;
            }
            
            .katex-display {
              margin: 12pt 0;
              text-align: center;
            }
          </style>
          
          <!-- KaTeX for math rendering -->
          <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/katex.min.css">
          <script defer src="https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/katex.min.js"></script>
          <script defer src="https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/contrib/auto-render.min.js"></script>
        </head>
        <body>
          <div class="header">
            <h1>${title}</h1>
            <p>Generated on ${new Date().toLocaleDateString()}</p>
          </div>
          
          <div class="content">
            ${printContent}
          </div>
          
          <div class="footer">
            <p>Document generated by Grading Pro - AI-Powered Academic Assistant</p>
          </div>
          
          <script>
            // Render math notation after page loads
            document.addEventListener("DOMContentLoaded", function() {
              if (window.renderMathInElement) {
                renderMathInElement(document.body, {
                  delimiters: [
                    {left: "$$", right: "$$", display: true},
                    {left: "$", right: "$", display: false},
                    {left: "\\\\[", right: "\\\\]", display: true},
                    {left: "\\\\(", right: "\\\\)", display: false}
                  ]
                });
              }
              
              // Auto-print after a short delay
              setTimeout(() => {
                window.print();
                window.close();
              }, 1000);
            });
          </script>
        </body>
      </html>
    `;
    
    return printHTML;
  };

  const handlePrint = () => {
    const printHTML = generatePrintableHTML();
    const printWindow = window.open('', '_blank');
    
    if (printWindow) {
      printWindow.document.write(printHTML);
      printWindow.document.close();
    } else {
      // Fallback: create a blob and download
      handleSaveAsPDF();
    }
  };

  const handleSaveAsPDF = () => {
    const printHTML = generatePrintableHTML();
    const blob = new Blob([printHTML], { type: 'text/html' });
    const url = URL.createObjectURL(blob);
    
    const link = document.createElement('a');
    link.href = url;
    link.download = `${fileName}.html`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };

  return (
    <div className={`flex gap-2 ${className}`}>
      <Button
        onClick={handlePrint}
        variant="outline"
        size="sm"
        className="flex items-center gap-2"
      >
        <Printer className="w-4 h-4" />
        Print
      </Button>
      
      <Button
        onClick={handleSaveAsPDF}
        variant="outline"
        size="sm"
        className="flex items-center gap-2"
      >
        <FileDown className="w-4 h-4" />
        Save as HTML
      </Button>
    </div>
  );
};

export default PDFExport;